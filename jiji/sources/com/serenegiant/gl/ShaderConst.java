package com.serenegiant.gl;

/* loaded from: classes2.dex */
public class ShaderConst implements GLConst {
    public static final String FUNC_GET_INTENSITY = "const highp vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\nhighp float getIntensity(vec3 c) {\nreturn dot(c.rgb, luminanceWeighting);\n}\n";
    public static final String FUNC_HSV2RGB = "vec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n";
    public static final String FUNC_RGB2HSV = "vec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\nvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n";
    public static final String HEADER_2D = "";
    public static final int KERNEL_SIZE3x3 = 9;
    public static final int KERNEL_SIZE5x5 = 25;
    public static final String SHADER_VERSION_ES2 = "#version 100\n";
    public static final String SHADER_VERSION_ES3 = "#version 300 es\n";
    public static final String VERTEX_SHADER_ES2 = "#version 100\nuniform mat4 uMVPMatrix;\nuniform mat4 uTexMatrix;\nattribute highp vec4 aPosition;\nattribute highp vec4 aTextureCoord;\nvarying highp vec2 vTextureCoord;\nvoid main() {\n    gl_Position = uMVPMatrix * aPosition;\n    vTextureCoord = (uTexMatrix * aTextureCoord).xy;\n}\n";
    public static final String VERTEX_SHADER_ES3 = "#version 300 es\nuniform mat4 uMVPMatrix;\nuniform mat4 uTexMatrix;\nin highp vec4 aPosition;\nin highp vec4 aTextureCoord;\nout highp vec2 vTextureCoord;\nvoid main() {\n    gl_Position = uMVPMatrix * aPosition;\n    vTextureCoord = (uTexMatrix * aTextureCoord).xy;\n}\n";
    public static final int[] TEX_NUMBERS = {33984, 33985, 33986, 33987, 33988, 33989, 33990, 33991, 33992, 33993, 33994, 33995, 33996, 33997, 33998, 33999, 34000, 34001, 34002, 34003, 34004, 34005, 34006, 34007, 34008, 34009, 34010, 34011, 34012, 34013, 34014, 34015};
    private static final String FRAGMENT_SHADER_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nvoid main() {\n    gl_FragColor = texture2D(sTexture, vTextureCoord);\n}\n";
    public static final String SAMPLER_2D = "sampler2D";
    public static final String FRAGMENT_SHADER_ES2 = String.format(FRAGMENT_SHADER_BASE_ES2, "", SAMPLER_2D);
    public static final String HEADER_OES_ES2 = "#extension GL_OES_EGL_image_external : require\n";
    public static final String SAMPLER_OES = "samplerExternalOES";
    public static final String FRAGMENT_SHADER_EXT_ES2 = String.format(FRAGMENT_SHADER_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    o_FragColor = texture(sTexture, vTextureCoord);\n}\n";
    public static final String FRAGMENT_SHADER_ES3 = String.format(FRAGMENT_SHADER_BASE_ES3, "", SAMPLER_2D);
    public static final String HEADER_OES_ES3 = "#extension GL_OES_EGL_image_external_essl3 : require\n";
    public static final String FRAGMENT_SHADER_EXT_ES3 = String.format(FRAGMENT_SHADER_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_BW_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nvoid main() {\n    vec4 tc = texture2D(sTexture, vTextureCoord);\n    float color = tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11;\n    gl_FragColor = vec4(color, color, color, 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_BW_ES2 = String.format(FRAGMENT_SHADER_BW_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_BW_ES2 = String.format(FRAGMENT_SHADER_BW_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_BW_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec4 tc = texture(sTexture, vTextureCoord);\n    float color = tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11;\n    o_FragColor = vec4(color, color, color, 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_BW_ES3 = String.format(FRAGMENT_SHADER_BW_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_BW_ES3 = String.format(FRAGMENT_SHADER_BW_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_NIGHT_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nvoid main() {\n    vec4 tc = texture2D(sTexture, vTextureCoord);\n    float color = ((tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11) - 0.5 * 1.5) + 0.8;\n    gl_FragColor = vec4(color, color + 0.15, color, 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_NIGHT_ES2 = String.format(FRAGMENT_SHADER_NIGHT_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_NIGHT_ES2 = String.format(FRAGMENT_SHADER_NIGHT_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_NIGHT_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec4 tc = texture(sTexture, vTextureCoord);\n    float color = ((tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11) - 0.5 * 1.5) + 0.8;\n    o_FragColor = vec4(color, color + 0.15, color, 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_NIGHT_ES3 = String.format(FRAGMENT_SHADER_NIGHT_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_NIGHT_ES3 = String.format(FRAGMENT_SHADER_NIGHT_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_CHROMA_KEY_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nvoid main() {\n    vec4 tc = texture2D(sTexture, vTextureCoord);\n    float color = ((tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11) - 0.5 * 1.5) + 0.8;\n    if(tc.g > 0.6 && tc.b < 0.6 && tc.r < 0.6){ \n        gl_FragColor = vec4(0, 0, 0, 0.0);\n    }else{ \n        gl_FragColor = texture2D(sTexture, vTextureCoord);\n    }\n}\n";
    public static final String FRAGMENT_SHADER_CHROMA_KEY_ES2 = String.format(FRAGMENT_SHADER_CHROMA_KEY_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_CHROMA_KEY_ES2 = String.format(FRAGMENT_SHADER_CHROMA_KEY_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_CHROMA_KEY_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec4 tc = texture(sTexture, vTextureCoord);\n    float color = ((tc.r * 0.3 + tc.g * 0.59 + tc.b * 0.11) - 0.5 * 1.5) + 0.8;\n    if(tc.g > 0.6 && tc.b < 0.6 && tc.r < 0.6){ \n        o_FragColor = vec4(0, 0, 0, 0.0);\n    }else{ \n        o_FragColor = texture(sTexture, vTextureCoord);\n    }\n}\n";
    public static final String FRAGMENT_SHADER_CHROMA_KEY_ES3 = String.format(FRAGMENT_SHADER_CHROMA_KEY_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_CHROMA_KEY_ES3 = String.format(FRAGMENT_SHADER_CHROMA_KEY_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_SQUEEZE_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = pow(r, 1.0/1.8) * 0.8;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_SQUEEZE_ES2 = String.format(FRAGMENT_SHADER_SQUEEZE_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_SQUEEZE_ES2 = String.format(FRAGMENT_SHADER_SQUEEZE_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_SQUEEZE_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = pow(r, 1.0/1.8) * 0.8;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_SQUEEZE_ES3 = String.format(FRAGMENT_SHADER_SQUEEZE_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_SQUEEZE_ES3 = String.format(FRAGMENT_SHADER_SQUEEZE_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_TWIRL_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    phi = phi + (1.0 - smoothstep(-0.5, 0.5, r)) * 4.0;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_TWIRL_ES2 = String.format(FRAGMENT_SHADER_TWIRL_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_TWIRL_ES2 = String.format(FRAGMENT_SHADER_TWIRL_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_TWIRL_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    phi = phi + (1.0 - smoothstep(-0.5, 0.5, r)) * 4.0;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_TWIRL_ES3 = String.format(FRAGMENT_SHADER_TWIRL_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_TWIRL_ES3 = String.format(FRAGMENT_SHADER_TWIRL_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_TUNNEL_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    if (r > 0.5) r = 0.5;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_TUNNEL_ES2 = String.format(FRAGMENT_SHADER_TUNNEL_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_TUNNEL_ES2 = String.format(FRAGMENT_SHADER_TUNNEL_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_TUNNEL_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    if (r > 0.5) r = 0.5;\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_TUNNEL_ES3 = String.format(FRAGMENT_SHADER_TUNNEL_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_TUNNEL_ES3 = String.format(FRAGMENT_SHADER_TUNNEL_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_BULGE_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = r * smoothstep(-0.1, 0.5, r);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_BULGE_ES2 = String.format(FRAGMENT_SHADER_BULGE_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_BULGE_ES2 = String.format(FRAGMENT_SHADER_BULGE_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_BULGE_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = r * smoothstep(-0.1, 0.5, r);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_BULGE_ES3 = String.format(FRAGMENT_SHADER_BULGE_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_BULGE_ES3 = String.format(FRAGMENT_SHADER_BULGE_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_DENT_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = 2.0 * r - r * smoothstep(0.0, 0.7, r);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_DENT_ES2 = String.format(FRAGMENT_SHADER_DENT_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_DENT_ES2 = String.format(FRAGMENT_SHADER_DENT_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_DENT_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = 2.0 * r - r * smoothstep(0.0, 0.7, r);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_DENT_ES3 = String.format(FRAGMENT_SHADER_DENT_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_DENT_ES3 = String.format(FRAGMENT_SHADER_DENT_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_FISHEYE_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = r * r / sqrt(2.0);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_FISHEYE_ES2 = String.format(FRAGMENT_SHADER_FISHEYE_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_FISHEYE_ES2 = String.format(FRAGMENT_SHADER_FISHEYE_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_FISHEYE_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    float r = length(normCoord); // to polar coords \n    float phi = atan(normCoord.y + uPosition.y, normCoord.x + uPosition.x);\n    r = r * r / sqrt(2.0);\n    normCoord.x = r * cos(phi); \n    normCoord.y = r * sin(phi); \n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_FISHEYE_ES3 = String.format(FRAGMENT_SHADER_FISHEYE_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_FISHEYE_ES3 = String.format(FRAGMENT_SHADER_FISHEYE_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_STRETCH_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    vec2 s = sign(normCoord + uPosition);\n    normCoord = abs(normCoord);\n    normCoord = 0.5 * normCoord + 0.5 * smoothstep(0.25, 0.5, normCoord) * normCoord;\n    normCoord = s * normCoord;\n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_STRETCH_ES2 = String.format(FRAGMENT_SHADER_STRETCH_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_STRETCH_ES2 = String.format(FRAGMENT_SHADER_STRETCH_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_STRETCH_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    vec2 s = sign(normCoord + uPosition);\n    normCoord = abs(normCoord);\n    normCoord = 0.5 * normCoord + 0.5 * smoothstep(0.25, 0.5, normCoord) * normCoord;\n    normCoord = s * normCoord;\n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_STRETCH_ES3 = String.format(FRAGMENT_SHADER_STRETCH_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_STRETCH_ES3 = String.format(FRAGMENT_SHADER_STRETCH_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_MIRROR_BASE_ES2 = "#version 100\n%sprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    normCoord.x = normCoord.x * sign(normCoord.x + uPosition.x);\n    texCoord = normCoord / 2.0 + 0.5;\n    gl_FragColor = texture2D(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_MIRROR_ES2 = String.format(FRAGMENT_SHADER_MIRROR_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_MIRROR_ES2 = String.format(FRAGMENT_SHADER_MIRROR_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_MIRROR_BASE_ES3 = "#version 300 es\n%sprecision mediump float;\nin vec2 vTextureCoord;\nuniform %s sTexture;\nuniform vec2 uPosition;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec2 texCoord = vTextureCoord.xy;\n    vec2 normCoord = 2.0 * texCoord - 1.0;\n    normCoord.x = normCoord.x * sign(normCoord.x + uPosition.x);\n    texCoord = normCoord / 2.0 + 0.5;\n    o_FragColor = texture(sTexture, texCoord);\n}\n";
    public static final String FRAGMENT_SHADER_MIRROR_ES3 = String.format(FRAGMENT_SHADER_MIRROR_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_MIRROR_ES3 = String.format(FRAGMENT_SHADER_MIRROR_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_SOBEL_BASE_ES2 = "#version 100\n%s#define KERNEL_SIZE3x3 9\nprecision highp float;\nvarying       vec2 vTextureCoord;\nuniform %s    sTexture;\nuniform float uKernel[18];\nuniform vec2  uTexOffset[KERNEL_SIZE3x3];\nuniform float uColorAdjust;\nvoid main() {\n    vec3 t0 = texture2D(sTexture, vTextureCoord + uTexOffset[0]).rgb;\n    vec3 t1 = texture2D(sTexture, vTextureCoord + uTexOffset[1]).rgb;\n    vec3 t2 = texture2D(sTexture, vTextureCoord + uTexOffset[2]).rgb;\n    vec3 t3 = texture2D(sTexture, vTextureCoord + uTexOffset[3]).rgb;\n    vec3 t4 = texture2D(sTexture, vTextureCoord + uTexOffset[4]).rgb;\n    vec3 t5 = texture2D(sTexture, vTextureCoord + uTexOffset[5]).rgb;\n    vec3 t6 = texture2D(sTexture, vTextureCoord + uTexOffset[6]).rgb;\n    vec3 t7 = texture2D(sTexture, vTextureCoord + uTexOffset[7]).rgb;\n    vec3 t8 = texture2D(sTexture, vTextureCoord + uTexOffset[8]).rgb;\n    vec3 sumH = t0 * uKernel[0] + t1 * uKernel[1] + t2 * uKernel[2]\n              + t3 * uKernel[3] + t4 * uKernel[4] + t5 * uKernel[5]\n              + t6 * uKernel[6] + t7 * uKernel[7] + t8 * uKernel[8];\n    float mag = length(sumH);\n    gl_FragColor = vec4(vec3(mag), 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_SOBEL_ES2 = String.format(FRAGMENT_SHADER_SOBEL_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_SOBEL_ES2 = String.format(FRAGMENT_SHADER_SOBEL_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    public static final String FRAGMENT_SHADER_SOBEL_BASE_ES3 = "#version 300 es\n%s#define KERNEL_SIZE3x3 9\nprecision highp float;\nin       vec2 vTextureCoord;\nuniform %s    sTexture;\nuniform float uKernel[18];\nuniform vec2  uTexOffset[KERNEL_SIZE3x3];\nuniform float uColorAdjust;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec3 t0 = texture(sTexture, vTextureCoord + uTexOffset[0]).rgb;\n    vec3 t1 = texture(sTexture, vTextureCoord + uTexOffset[1]).rgb;\n    vec3 t2 = texture(sTexture, vTextureCoord + uTexOffset[2]).rgb;\n    vec3 t3 = texture(sTexture, vTextureCoord + uTexOffset[3]).rgb;\n    vec3 t4 = texture(sTexture, vTextureCoord + uTexOffset[4]).rgb;\n    vec3 t5 = texture(sTexture, vTextureCoord + uTexOffset[5]).rgb;\n    vec3 t6 = texture(sTexture, vTextureCoord + uTexOffset[6]).rgb;\n    vec3 t7 = texture(sTexture, vTextureCoord + uTexOffset[7]).rgb;\n    vec3 t8 = texture(sTexture, vTextureCoord + uTexOffset[8]).rgb;\n    vec3 sumH = t0 * uKernel[0] + t1 * uKernel[1] + t2 * uKernel[2]\n              + t3 * uKernel[3] + t4 * uKernel[4] + t5 * uKernel[5]\n              + t6 * uKernel[6] + t7 * uKernel[7] + t8 * uKernel[8];\n    float mag = length(sumH);\n    o_FragColor = vec4(vec3(mag), 1.0);\n}\n";
    public static final String FRAGMENT_SHADER_SOBEL_ES3 = String.format(FRAGMENT_SHADER_SOBEL_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_SOBEL_ES3 = String.format(FRAGMENT_SHADER_SOBEL_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
    public static final float[] KERNEL_NULL = {0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    public static final float[] KERNEL_SOBEL_H = {1.0f, 0.0f, -1.0f, 2.0f, 0.0f, -2.0f, 1.0f, 0.0f, -1.0f};
    public static final float[] KERNEL_SOBEL_V = {1.0f, 2.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, -2.0f, -1.0f};
    public static final float[] KERNEL_SOBEL2_H = {3.0f, 0.0f, -3.0f, 10.0f, 0.0f, -10.0f, 3.0f, 0.0f, -3.0f};
    public static final float[] KERNEL_SOBEL2_V = {3.0f, 10.0f, 3.0f, 0.0f, 0.0f, 0.0f, -3.0f, -10.0f, -3.0f};
    public static final float[] KERNEL_SHARPNESS = {0.0f, -1.0f, 0.0f, -1.0f, 5.0f, -1.0f, 0.0f, -1.0f, 0.0f};
    public static final float[] KERNEL_EDGE_DETECT = {-1.0f, -1.0f, -1.0f, -1.0f, 8.0f, -1.0f, -1.0f, -1.0f, -1.0f};
    public static final float[] KERNEL_EMBOSS = {2.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, -1.0f};
    public static final float[] KERNEL_SMOOTH = {0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f, 0.11111111f};
    public static final float[] KERNEL_GAUSSIAN = {0.0625f, 0.125f, 0.0625f, 0.125f, 0.25f, 0.125f, 0.0625f, 0.125f, 0.0625f};
    public static final float[] KERNEL_BRIGHTEN = {1.0f, 1.0f, 1.0f, 1.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f};
    public static final float[] KERNEL_LAPLACIAN = {1.0f, 1.0f, 1.0f, 1.0f, -8.0f, 1.0f, 1.0f, 1.0f, 1.0f};
    private static final String FRAGMENT_SHADER_FILT3x3_BASE_ES2 = "#version 100\n%s#define KERNEL_SIZE3x3 9\nprecision highp float;\nvarying       vec2 vTextureCoord;\nuniform %s    sTexture;\nuniform float uKernel[18];\nuniform vec2  uTexOffset[KERNEL_SIZE3x3];\nuniform float uColorAdjust;\nvoid main() {\n    vec4 sum = vec4(0.0);\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[0]) * uKernel[0];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[1]) * uKernel[1];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[2]) * uKernel[2];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[3]) * uKernel[3];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[4]) * uKernel[4];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[5]) * uKernel[5];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[6]) * uKernel[6];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[7]) * uKernel[7];\n    sum += texture2D(sTexture, vTextureCoord + uTexOffset[8]) * uKernel[8];\n    gl_FragColor = sum + uColorAdjust;\n}\n";
    public static final String FRAGMENT_SHADER_FILT3x3_ES2 = String.format(FRAGMENT_SHADER_FILT3x3_BASE_ES2, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_FILT3x3_ES2 = String.format(FRAGMENT_SHADER_FILT3x3_BASE_ES2, HEADER_OES_ES2, SAMPLER_OES);
    private static final String FRAGMENT_SHADER_FILT3x3_BASE_ES3 = "#version 300 es\n%s#define KERNEL_SIZE3x3 9\nprecision highp float;\nin       vec2 vTextureCoord;\nuniform %s    sTexture;\nuniform float uKernel[18];\nuniform vec2  uTexOffset[KERNEL_SIZE3x3];\nuniform float uColorAdjust;\nlayout(location = 0) out vec4 o_FragColor;\nvoid main() {\n    vec4 sum = vec4(0.0);\n    sum += texture(sTexture, vTextureCoord + uTexOffset[0]) * uKernel[0];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[1]) * uKernel[1];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[2]) * uKernel[2];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[3]) * uKernel[3];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[4]) * uKernel[4];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[5]) * uKernel[5];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[6]) * uKernel[6];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[7]) * uKernel[7];\n    sum += texture(sTexture, vTextureCoord + uTexOffset[8]) * uKernel[8];\n    o_FragColor = sum + uColorAdjust;\n}\n";
    public static final String FRAGMENT_SHADER_FILT3x3_ES3 = String.format(FRAGMENT_SHADER_FILT3x3_BASE_ES3, "", SAMPLER_2D);
    public static final String FRAGMENT_SHADER_EXT_FILT3x3_ES3 = String.format(FRAGMENT_SHADER_FILT3x3_BASE_ES3, HEADER_OES_ES3, SAMPLER_OES);
}
